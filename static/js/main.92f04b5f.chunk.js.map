{"version":3,"sources":["components/Todolist.module.css","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","redux/tasks-reducer.ts","redux/todolists-reducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","todolistNames","useSelector","state","todolists","trimmedTitle","trim","addItem","existingTitle","find","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","todolistId","taskId","className","isDone","s","Checkbox","checked","changeTaskStatus","removeTask","Todolist","addTask","id","tasksForTodolist","tasks","todolistIsDone","length","t","changeTodolistTitle","removeTodolist","Delete","dataTime","time","map","initialState","App","dispatch","useDispatch","type","removeTaskAC","newTaskTitle","addTaskAC","newTitle","changeTaskTitleAC","changeTaskStatusAC","removeTodolistAC","addTodoList","action","todolistID","v1","addTodolistAC","Container","fixed","Grid","container","spacing","style","padding","td","allTodolistTasks","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todolistTitle","newState","todolist","tl","filter","n","now","Date","toLocaleString","newTodoList","push","stateCopy","filteredTasks","newTask","todolistTasks","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92f04b5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTime\":\"Todolist_dataTime__mRWYP\",\"isDone\":\"Todolist_isDone__rlRX3\"};","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox, ControlPoint } from \"@material-ui/icons\";\nimport { useSelector } from 'react-redux';\nimport { AppRootStateType } from '../redux/store';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n\n    let [title, setTitle] = useState('')\n\n    const [error, setError] = useState<null | string>(null)\n\n\n    let todolistNames = useSelector<AppRootStateType, string[]>(state => state.todolists.todolistNames)\n\n    const trimmedTitle = title.trim()\n\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    };\n    const addItem = () => {\n        // проверяем: если строка обрезана (trimmedTitle) и её длина не равна 0 то условие выполняется, т.к. это псевдоложь\n        // дальше проверяем что тудулиста с таким именем не существует\n        if (trimmedTitle) {\n            let existingTitle = todolistNames.find(title => title === trimmedTitle)\n\n\n            if (existingTitle) {\n                setError(\"Todolist with the same name already exists\")\n            } else {\n                props.addItem(trimmedTitle);\n                setTitle('')\n                return\n            }\n\n        } else {\n            setError('Title cannot be empty')\n        }\n\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n\n        if (e.charCode === 13) {\n            addItem()\n        }\n    };\n\n\n    return (\n        <div>\n            <TextField\n                variant={\"outlined\"}\n                label={'Type title'}\n                value={title}\n                onChange={inputChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton\n                color={'primary'}\n                onClick={addItem}\n            >\n                <ControlPoint />\n            </IconButton>\n\n        </div>\n    )\n})","import React, {ChangeEvent, useState, KeyboardEvent,} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function EditableSpan(props: EditableSpanPropsType) {\n\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState(props.title)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      \n        if (e.charCode === 13) {\n            setEditMode(false)\n            props.onChange(title)\n        }\n    };\n\n    return editMode\n        ? <TextField variant={\"standard\"}\n                     value={title}\n                     onBlur={activateViewMode}\n                     autoFocus\n                     onChange={onChangeTitleHandler}\n                     onKeyPress={onKeyPressHandler}\n        />\n        : <span onDoubleClick={activateEditMode}>{title}</span>\n\n})","import { Checkbox, IconButton } from \"@material-ui/core\"\nimport React, { useCallback } from \"react\"\nimport { EditableSpan } from \"./EditableSpan\"\nimport s from \"./Todolist.module.css\"\n\ntype TaskPropsType = {\n    taskId: string\n    title: string\n    isDone: boolean\n    todolistId: string\n    changeTaskStatus: (todolistId: string, taskId: string, taskStatus: boolean) => void\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\n    removeTask: (todolistId: string, taskId: string) => void\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n\n    const onTitleChangeHandler = useCallback((newValue) => props.changeTaskTitle(props.todolistId, props.taskId, newValue),\n        [props.changeTaskTitle, props.todolistId, props.taskId])\n\n    return (<div className={props.isDone ? s.isDone : ''}>\n        <Checkbox\n            color={'secondary'}\n            checked={props.isDone}\n            onChange={(e) =>\n                props.changeTaskStatus(props.todolistId, props.taskId, e.currentTarget.checked)}\n        />\n        <EditableSpan title={props.title} onChange={onTitleChangeHandler} />\n        <IconButton onClick={() => props.removeTask(props.todolistId, props.taskId)}>\n            x\n        </IconButton>\n    </div>\n    )\n})","import React, { useCallback } from 'react';\nimport { AddItemForm } from './AddItemForm';\nimport { EditableSpan } from './EditableSpan';\nimport { Button, IconButton } from '@material-ui/core';\nimport { Delete } from \"@material-ui/icons\";\nimport { Task } from \"./Task\";\nimport { TaskType } from '../redux/tasks-reducer';\nimport s from \"./Todolist.module.css\"\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    addTask: (todoListID: string, title: string) => void\n    removeTask: (todoListID: string, id: string) => void\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\n    changeTodolistTitle: (todoListID: string, newTitle: string) => void\n    time: string\n    removeTodolist: (todoListID: string) => void\n}\n\n\nexport const Todolist = React.memo(function (props: TodoListPropsType) {\n\n\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(props.id, title)\n    }, [props.addTask, props.id])\n\n    const removeTodoList = () => {\n        props.removeTodolist(props.id)\n    }\n\n\n    let tasksForTodolist = props.tasks\n\n    //проверяем есть ли невыполненная таска. если есть, значит тудулист не выполнен.\n    // используем это для задания прозрачности тудулисту в className\n    let todolistIsDone: boolean = false;\n    if (tasksForTodolist.length >= 1) {\n        const unfulfilledTask = tasksForTodolist.find(t => t.isDone !== true)\n        if (!unfulfilledTask) {\n            todolistIsDone = true\n        }\n    }\n\n\n\n\n    return (\n        <div className={todolistIsDone ? s.isDone : \"\"}>\n            <h3><EditableSpan title={props.title} onChange={\n                useCallback((newValue) => {\n                    props.changeTodolistTitle(props.id, newValue)\n                }, [props.changeTodolistTitle, props.id])\n            } />\n                <IconButton onClick={removeTodoList}>\n                    <Delete />\n                </IconButton>\n                <span className={s.dataTime}>{props.time}</span>\n            </h3>\n\n            <AddItemForm\n                addItem={addTask}\n            />\n\n            <div>\n                {\n                    tasksForTodolist.map(t => <Task key={t.id}\n                        taskId={t.id}\n                        title={t.title}\n                        isDone={t.isDone}\n                        todolistId={props.id}\n                        changeTaskStatus={props.changeTaskStatus}\n                        changeTaskTitle={props.changeTaskTitle}\n                        removeTask={props.removeTask}\n                    />)\n                }\n\n            </div>\n        </div>\n    )\n})\n\n","import {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n    \"1\": [\r\n        {id: \"1\", title: \"task\", isDone: true},\r\n        {id: \"2\", title: \"double-click on me\", isDone: false}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\" : {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id != action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\" : {\r\n            const stateCopy = {...state};\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = [newTask, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\" : {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone } : t);\r\n\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks.map(t => t.id === action.taskId ? {...t, title: action.title } : t)\r\n\r\n            return ({...state});\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistID] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete  stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (todolistId: string, title: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean, ): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n\r\n// types\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n    // объект может иметь только строковые свойства-ключи,\r\n    // и значения этих св-в это массив объектов TaskPropsType\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType","import { v1 } from \"uuid\";\n\n\nconst initialState: InitialStateType = {\n    todolists: [\n        { id: \"1\", time: \"09.11.2021, 00:00:00\", title: \"test\" }\n    ],\n    todolistNames: [\"test\"]\n}\n\n\nexport const todolistsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n\n        case 'REMOVE-TODOLIST': {\n            let newState = { ...state }\n            let todolist = newState.todolists.find(tl => tl.id === action.id)\n            let todolistTitle: string;\n            if (todolist) { todolistTitle = todolist.title }\n            newState.todolists = newState.todolists.filter(tl => tl.id !== action.id);\n            newState.todolistNames = newState.todolistNames.filter(n => n !== todolistTitle)\n            return newState\n        }\n        case 'ADD-TODOLIST': {\n            let newState = { ...state, ...state.todolistNames }\n            let now = new Date().toLocaleString()\n            let newTodoList: TodoListType = { id: action.todolistID, title: action.title, time: now }\n            newState.todolists = [...newState.todolists, newTodoList]\n            newState.todolistNames.push(action.title)\n            return newState\n        }\n\n        case 'CHANGE-TODOLIST-TITLE': {\n            let newState = { ...state, ...state.todolists }\n            let todolist = newState.todolists.find(t => t.id === action.id)\n\n            if (todolist) {\n                let todolistTitle = todolist.title\n                newState.todolistNames = newState.todolistNames.filter(n => n !== todolistTitle)\n                todolist.title = action.title\n                newState.todolistNames.push(action.title)\n            }\n\n            return newState\n        }\n\n        default: return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return { type: 'REMOVE-TODOLIST', id: todolistId }\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return { type: 'ADD-TODOLIST', title: title, todolistID: v1() }\n}\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        id: id,\n        title: title\n    }\n}\n\n\n\n// types\n\nexport type InitialStateType = {\n    todolists: Array<TodoListType>\n    todolistNames: string[]\n}\n\n\nexport type TodoListType = {\n    id: string\n    title: string\n    time: string\n}\n\ntype ActionsType =\n    RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistID: string\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string\n    id: string\n}\n\n\n","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Todolist } from \"./components/Todolist\";\nimport { AppRootStateType } from \"./redux/store\";\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TasksStateType } from \"./redux/tasks-reducer\";\nimport { addTodolistAC, changeTodolistTitleAC, removeTodolistAC, TodoListType } from \"./redux/todolists-reducer\";\nimport { Container, Grid,  Paper } from \"@material-ui/core\";\nimport { AddItemForm } from \"./components/AddItemForm\";\n\n\n\nfunction App() {\n  \n  const dispatch = useDispatch()\n  const todolists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists.todolists)\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n\n\n  const removeTask = useCallback( (todolistId: string, taskId: string) => {\n\n      dispatch(removeTaskAC(todolistId,taskId))\n\n  }, [dispatch] )\n\n\n  const addTask = useCallback ( (todolistId: string, newTaskTitle: string) => {\n\n      dispatch(addTaskAC(todolistId, newTaskTitle))\n  }, [dispatch] )\n\n  const changeTaskTitle = useCallback( (todolistId: string, taskId: string, newTitle: string) => {\n\n      dispatch(changeTaskTitleAC(todolistId, taskId, newTitle))\n\n  }, [dispatch] )\n\n  const changeTaskStatus = useCallback( (todolistId: string, taskId: string, isDone: boolean) => {\n\n      dispatch(changeTaskStatusAC(todolistId, taskId, isDone))\n\n  }, [dispatch] )\n\n  const removeTodolist = useCallback( (todolistId: string) => {\n\n      dispatch(removeTodolistAC(todolistId))\n\n  }, [dispatch] )\n\n  const addTodoList = useCallback( (title: string) => {\n\n      const action = addTodolistAC(title)\n\n      dispatch(action)\n\n  }, [dispatch] )\n\n  const changeTodolistTitle = useCallback( (todolistId: string, newTitle: string) => {\n\n      dispatch(changeTodolistTitleAC(todolistId,newTitle))\n\n  }, [dispatch] )\n\n  return (\n      <div>\n          <Container fixed>\n              <Grid container spacing={3} style={{padding: \"20px\"}}>\n                  <AddItemForm addItem={addTodoList}/>\n              </Grid>\n              <Grid container spacing={3}>\n                  {\n                      todolists.map(td => {\n                          let allTodolistTasks = tasks[td.id]\n\n                          return <Grid item>\n                              <Paper style={{padding: \"10px\"}}>\n                                  <Todolist key={td.id}\n                                            id={td.id}\n                                            title={td.title}\n                                            tasks={allTodolistTasks}                                    \n                                            time={td.time}\n                                            removeTask={removeTask}                                           \n                                            addTask={addTask}\n                                            changeTaskStatus={changeTaskStatus}\n                                            removeTodolist={removeTodolist}\n                                            changeTaskTitle={changeTaskTitle}\n                                            changeTodolistTitle={changeTodolistTitle}\n                                  />\n                              </Paper>\n                          </Grid>\n                      })\n                  }\n              </Grid>\n\n          </Container>\n          </div>       \n )}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from \"redux\";\nimport { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\n\n\n//корневой reducer который получает все action-ы и раскидывает дальше по всем редьюсерам\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer\n})\n\n//создаёт тип на основе анализа того что rootReducer возвращает\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer)\n\n\n\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}